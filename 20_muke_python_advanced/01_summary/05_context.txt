context

什么是上下文切换？
	1）分时系统，操作系统系统可以运行远远超过CPU核心数的进程。当然这些任务实际上并不是真的在同时运行，而是因为系统在很短的时间内，将CPU轮流分配给他们，造成多任务同时运行的错觉（并行 并发的概念）

	2）在每个任务运行前，CPU都需要知道任务从哪里加载，又从哪里开始运行，那么这一个就是CPU运行时需要的上下文

	3）上下文类型
	寄存器上下文：通用寄存器、程序寄存器（IP）、处理器状态寄存器（EFLAGS）、栈指针（ESP）	（CPU）
	用户级上下文：正文、数据、用户堆栈以及共享存储区	(进程 主存)
	系统上下文：进程控制块task_struct、内存管理信息（mm_struct、vm_area_struct、pgd、pte）、内核栈 (主存)

	4）上下文流程
	准备就绪进程运行数据
	保存当前进程运行状态
	迁出当前进程数据
	迁入就绪进程数据
	恢复就绪进程上一次运行状态
	就绪进程开始运行


上下文切换的成本
sar -w 1 10
2us ~ 5us
数据参考：
	1）一次上下文切换的时间约: 2us ~ 5us
	2）在8核16G内存的服务器上每秒上下文切换数：40000 ~ 50000次
        [root@public_16_141 ~]# sar -w 1 10
	03:51:55 PM    proc/s   cswch/s
	03:51:59 PM      1.75   40000.25
	Average:         1.75   40000.25
	每1秒的运行中 有5us * 40000/1000/8 = 25ms 的时间浪费

进程切换 Memory + cpu里面的cache 重
线程切换 Memory上下文不保存 + 部分CPU里的cache 轻

上下文切换可以分为两种情况：
	同一个进程的多个内核级线程相互切换
	不通进程的多个内核级线程的相互切换	
