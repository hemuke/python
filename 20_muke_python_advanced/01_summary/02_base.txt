https://www.imooc.com/wiki/coroutine/c2s7.html

1）第一部分计算机组成:
	*）存储器：内存、磁盘、SSD
	*）运算器：CPU、显卡
	*）主板：总线
	*）输入设备：键盘、鼠标
	*）输出设备：显示器、音箱
	*）散热器、电源、机箱
	*）控制器
存储器+运算器+控制器+输入设备+输出设备等于冯诺依玛体系计算机

稀缺资源：
	*）计算资源：大型游戏的运行过程卡顿，CPU算力不够、并发量大的后台服务
	*）存储资源：大型游戏的运行过程加载速度慢，存储读写速度不够、并发量大的后台服务
	*）网络资源：并发量大的后台服务


	a）计算机组成部分CPU:单核CPU、多核CPU(7nm 5nm的CPU)
		*）HZ赫兹 频率单位 记录每秒周期性变动的次数
	   	1Hz = 1次/秒 高低电平切换次数
           	1000Hz = 1000次/秒 高低电平切换次数
           	2GHz = 2 * 1000 * 1000 * 1000 = 20亿从/秒 高低电平切换次数

	    CPU内核组成
		*）运算器组成：进行数据运行和加工
		   数据缓存器（输入缓冲，输入缓冲，负责数据暂时缓冲）、ALU（计算的元器件）、通用寄存器、状态寄存器（计算状态的保存）
		*）控制器组成：协调和控制计算机运行的
		   程序计数器（程序计数器相当于指令指针）、时序发生器（发出信号的脉冲高低电平）、指令译码器（指令译码翻译成高低电平电信号）、各种寄存器组成的
		*）高速缓存
       
            CPU的功能
		*）控制程序的顺序运行
		*）产生完成每条指令所需要的控制指令，属于译码器的功能,由控制器完成
                *）对各种操作加以时间上的控制（时序发生器）
                *）进行数据运行和加工，运算器完成


	b）存储器：
		*）缓存（CPU cache(L1 L2 L3)）、主存（内存条）、辅存（磁盘 SSD 磁带 CD）	
		*）局部性原理：CPU访问存储器，无论是存取指令存取数据，所访问的存储单元都是趋于聚集在一个较小的连续区域中
 		*）存储器的结构





2）第二部分操作系统：
	*）操作系统统一管理计算机资源：操作系统通过驱动去管理文件资源、I/O设备资源、处理器资源、存储资源
           这样程序开发就不需要面对这些驱动开发
	*）操作系统实现了对计算机资源的抽象
           IO设备管理软件，虚拟设备
           文件管理软件 写文件读文件 都是虚拟文件
           这样程序开发就不需要面对这些驱动开发
	*）用户交互操作系统：系统调用(程序)操作硬件、命令(人)、图形界面(人)
           上层应用程序用系统调用进行:
		*）创建进程
		*）打开文件
		*）网络发送
	*）历史：
	   无操作系统：人工操作，用户独占，CPU等待人工操作
	   批处理系统：无需等待人工操作，批量输入任务，多道程序设计
		多道程序设计祥述：
		*）早期一次只能处理一个任务，即使任务是一批提交的，但是任务只能一个个处理，一个任务阻塞就阻塞所有任务
		*）计算机内存中有多个程序
		*）计算机管理程序之下相互穿插运行
		*）以前手机塞班系统不支持
	   分时系统：人-机交互，多用户共享，及时调试程序，资源利用率提升
	

	*）操作系统的用户态和内核态:
	   为了保存底层的资源(处理器资源 IO设备资源 存储器资源 文件资源) 才开放内核态和用户态的
	   *）内核态: 
              内核空间：存放的是内核代码和数据
              进程执行操作系统内核的代码
              CPU可以访问内存所有数据，包括外围设备。
              进程切换也是把进程放到内核态完成的，以及执行系统调用函数
	   *）用户态：
              用户空间：存放的是用户程序的代码和数据
              进程执行用户自己的代码（非系统调用之类的函数）。
              CPU只可以访问有限的内存。不允许访问外设
              当用户态需要网卡数据 先切换到内核态 内核态完成数据读取，将数据拷贝到对应用户空间 再切换到用户空间读取
           *）用户态切换到内核态：
	      *）系统调用
              所有用户的程序默认都是运行在用户态的，但是有时候程序确实需要做一些内核态的事情，例如从硬盘读取数据等。因为管理硬件设备这些工作是由操作系统承担的，因此可以做这些事情的只有操作系统，所以此时程序就需要先操作系统请求以程序的名义来执行这些操作。系统调用是操作系统向上提供可以操作计算机的机制，它以函数调用的形式提供。在系统调用时，用户态程序会切换到内核态，运行指定的内核逻辑。

              *）异常事件
              当CPU正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，比如缺页异常，Ctrl+C kill信号等等，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件。

              *）外围设备的中断
              当外围设备完成用户的请求操作后，会像CPU发出中断信号，CPU就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，处理程序需要切换到内核态去处理外围设备的数据，因此，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。
举个例子：当程序需要向磁盘读取一段数据，由于磁盘的速度远小于CPU的速度，所以在发生IO事件的时候，CPU往往会挂起当前进程，转而执行别的进程，等磁盘DMA准备完成后，由磁盘发出信号通知CPU，进行相关的处理。

              这三种方式的切换，我们需要特别注意系统调用的方式，系统调用可以理解为编程人员本身主动让程序切换到内核态的行为，系统调用是主动发生的，和另外两种有着本质的区别。





3）第三部分基础概念
	*）并行与并发
		*）单核CPU只有并发 没有并行
		*）多核CPU有并发 并行
	*）同步与异步：强调的是消息通信机制
		*）同步
			磁盘读写 DMA 网络设备数据读写都是阻塞状态
		*）异步
                        信号量 协程都是非阻塞状态
	*）阻塞与非阻塞：程序在等待调用结果时的状态
	*）计算密集型和IO密集型
        IO密集型：频繁读写网络、磁盘等任务都属于IO密集型任务 完成一项任务的时间取决于IO设备的速度 CPU利用率低，大部分在等待设备完成
        计算密集型：
		*）yum install sysstat
		   sar -h

        """
        (base) [root@k8s-ansible 01_summary]# sar -u 5 10	查看CPU的核心数
        Linux 3.10.0-957.el7.x86_64 (k8s-ansible) 	04/15/2021 	_x86_64_	(8 CPU)
        
        09:58:10 AM     CPU     %user     %nice   %system   %iowait    %steal     %idle
        09:58:15 AM     all      0.00      0.00      0.03      0.00      0.00     99.97
        09:58:20 AM     all      0.03      0.00      0.03      0.00      0.00     99.95
        09:58:25 AM     all      0.00      0.00      0.03      0.00      0.00     99.97
        09:58:30 AM     all      0.03      0.00      0.00      0.00      0.00     99.97
        09:58:35 AM     all      0.00      0.00      0.03      0.00      0.00     99.97
        09:58:40 AM     all      0.02      0.00      0.02      0.02      0.00     99.93
        09:58:45 AM     all      0.03      0.00      0.00      0.00      0.00     99.97
        09:58:50 AM     all      0.00      0.00      0.03      0.00      0.00     99.97
        09:58:55 AM     all      0.03      0.00      0.00      0.00      0.00     99.97
        09:59:00 AM     all      0.03      0.00      0.00      0.00      0.00     99.97
        Average:        all      0.02      0.00      0.02      0.00      0.00     99.97
        """

        """
        (base) [root@k8s-ansible 01_summary]# sar -b 5 10
        Linux 3.10.0-957.el7.x86_64 (k8s-ansible) 	04/15/2021 	_x86_64_	(8 CPU)
        
        10:02:37 AM       tps      rtps      wtps   bread/s   bwrtn/s
        10:02:42 AM      0.40      0.00      0.40      0.00      9.00
        10:02:47 AM      0.00      0.00      0.00      0.00      0.00
        10:02:52 AM      0.00      0.00      0.00      0.00      0.00
        10:02:57 AM      0.00      0.00      0.00      0.00      0.00
        10:03:02 AM      0.00      0.00      0.00      0.00      0.00
        10:03:07 AM      0.20      0.00      0.20      0.00      6.40
        10:03:12 AM      2.00      0.00      2.00      0.00     44.20
        10:03:17 AM      0.00      0.00      0.00      0.00      0.00
        10:03:22 AM      0.00      0.00      0.00      0.00      0.00
        10:03:27 AM      0.00      0.00      0.00      0.00      0.00
        Average:         0.26      0.00      0.26      0.00      5.96
        tps = rtps + wtps
        bread/s 每秒读入数据磁盘块
        bwrtn/s 每秒写入数据磁盘块
        """

        *）例子1 往磁盘写1G的数据 IO密集型和CPU密集型 因为有2层的for循环以及一次的f.flush()导致CPU上升
        # -*- encoding=utf-8 -*-
        with open('empty-1G.txt', 'w') as f:
            for i in range(1024*1024):
                for j in range(1024):
                    f.write('c')
                f.flush() 
        
        *) 例子2 计算1024000！ CPU密集型
        # -*- encoding=utf-8 -*-
        result = 1
        for i in range(1, 1024001):
            result = result * i 
        
       
        web的应用属于IO密集型
        CPU的计算密集型
