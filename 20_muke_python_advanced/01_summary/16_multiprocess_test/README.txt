1）多线程对下载模块有明显加速作用
2）多线程对哈希模块说不定还是副作用
3）多线程对存储模块有明显加速作用

python是伪多线程 其实还是并发执行 不是并行

1）下载模块 IO密集模块
2）哈希模块 CPU密集模块
3）存储模块 IO密集模块
4）调度模块


多进程的下载模块的提升率 比 多线程的提升率差
多进程的存储模块的提升率 比 多线程的提升率差
什么原因导致的这个结果？是上下文切换。

什么是上下文切换？linux支持多个进程超过CPU核数的，同时并发并行处理，每一次的进程切换，保存的数据就是上下文切换
上下文切换的类型？寄存器级上下文、用户级上下文、系统级上下文
每个进程都有进程控制块：标识符,状态,优先级,程序计数器,内存指针,上下文数据,IO状态信息,记账信息
进程的上下文切换 比 线程的上下文切换 重很多

time python 多进程的局限性.py

使用多进程需要考虑多进程切换的成本
